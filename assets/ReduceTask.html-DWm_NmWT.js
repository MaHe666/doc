import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as n}from"./app-DHHqPQyF.js";const c={},t=n(`<p>ReduceTask的并行度同样影响整个Job的执行并发度和执行效率，但与 MapTask 的并发数由切片数决定不同，ReduceTask数量的决定是可以直接手动设置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>ReduceTask=0，表示没有Reduce阶段，输出文件个数和Map个数一致</li><li>ReduceTask默认值就是1，所以输出文件个数为一个</li><li>如果数据分布不均匀，就有可能在Reduce阶段产生数据倾斜</li><li>ReduceTask数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计算全局汇总结果，就只能有1个ReduceTask。</li><li>具体多少个ReduceTask，需要根据集群性能而定。</li><li>如果分区数不是1，但是ReduceTask为1，是否执行分区过程。答案是:不执行分区过程。因为在MapTask的源码中，执行分区的前提是先判断ReduceNum个数是否大于1。不大于1肯定不执行。</li></ol>`,3),l=[t];function i(u,o){return a(),s("div",null,l)}const r=e(c,[["render",i],["__file","ReduceTask.html.vue"]]);export{r as default};
