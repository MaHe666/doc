import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c,d as e,e as n,a,f as l}from"./app-B_OKlmLu.js";const r={},d=e("h2",{id:"数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据类型"},[e("span",null,"数据类型")])],-1),i={href:"https://www.runoob.com/cplusplus/cpp-data-types.html",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"变量类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#变量类型"},[e("span",null,"变量类型")])],-1),h={href:"https://www.runoob.com/cplusplus/cpp-variable-types.html",target:"_blank",rel:"noopener noreferrer"},m=e("h3",{id:"c-c-中局部-全局变量初始值或默认值问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#c-c-中局部-全局变量初始值或默认值问题"},[e("span",null,"C/C++中局部/全局变量初始值或默认值问题")])],-1),b={href:"https://www.cnblogs.com/zhangzongjun/p/15520449.html",target:"_blank",rel:"noopener noreferrer"},_=l(`<h3 id="extern-关键字" tabindex="-1"><a class="header-anchor" href="#extern-关键字"><span>extern 关键字</span></a></h3><p>假设我们有两个源文件 <code>file1.cpp</code> 和 <code>file2.cpp</code></p><p>在 <code>file1.cpp</code> 中定义了一个全局变量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> myGlobalVar <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>  <span class="token comment">// 这里定义并初始化了全局变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想在 <code>file2.cpp</code> 中使用这个全局变量，就需要使用 extern 进行声明：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> myGlobalVar<span class="token punctuation">;</span>  <span class="token comment">// 告诉编译器这个变量在其他地方定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，在 <code>file2.cpp</code> 中就可以使用 myGlobalVar 这个变量了。</p><p>其次，对于函数而言，同样假设在 <code>func1.cpp</code> 中定义了一个函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 函数的具体实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>func2.cpp</code> 中如果要调用这个函数，就可以这样声明：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明函数在其他地方定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就可以在 <code>func2.cpp</code> 中调用 myFunction 函数了。</p><p>extern 的主要作用就是让编译器知道，被声明的变量或函数是在其他的源文件中定义的，从而能够在当前文件中正确地使用它们，实现了代码在多个文件之间的共享和复用。</p><h2 id="修饰符-和-类型限定符类型" tabindex="-1"><a class="header-anchor" href="#修饰符-和-类型限定符类型"><span>修饰符 和 类型限定符类型</span></a></h2>`,14),w={href:"https://www.runoob.com/cplusplus/cpp-modifier-types.html",target:"_blank",rel:"noopener noreferrer"},f=e("h2",{id:"存储类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#存储类"},[e("span",null,"存储类")])],-1),k={href:"https://www.runoob.com/cplusplus/cpp-storage-classes.html",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"运算符",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#运算符"},[e("span",null,"运算符")])],-1),g={href:"https://www.runoob.com/cplusplus/cpp-operators.html",target:"_blank",rel:"noopener noreferrer"};function x(y,V){const s=t("ExternalLinkIcon");return o(),c("div",null,[d,e("p",null,[n("菜鸟教程："),e("a",i,[n("https://www.runoob.com/cplusplus/cpp-data-types.html"),a(s)])]),u,e("p",null,[n("菜鸟教程："),e("a",h,[n("https://www.runoob.com/cplusplus/cpp-variable-types.html"),a(s)])]),m,e("p",null,[n("相关博客："),e("a",b,[n("https://www.cnblogs.com/zhangzongjun/p/15520449.html"),a(s)])]),_,e("p",null,[n("菜鸟教程："),e("a",w,[n("https://www.runoob.com/cplusplus/cpp-modifier-types.html"),a(s)])]),f,e("p",null,[n("菜鸟教程："),e("a",k,[n("https://www.runoob.com/cplusplus/cpp-storage-classes.html"),a(s)])]),v,e("p",null,[n("菜鸟教程："),e("a",g,[n("https://www.runoob.com/cplusplus/cpp-operators.html"),a(s)])])])}const B=p(r,[["render",x],["__file","index.html.vue"]]);export{B as default};
