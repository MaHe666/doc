import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,f as a}from"./app-CBl934tH.js";const s={},n=a(`<p><code>org.apache.hadoop.mapreduce.lib.input</code> 包下的 <code>CombineTextInputFormat</code> 是 同包下的 <code>CombineFileInputFormat</code> 类 的实现类</p><p>而 <code>CombineFileInputFormat</code> 类，才是 <code>FileInputFormat</code> 的实现类</p><p>所以我们这里说的是 <code>FileInputFormat</code> 的实现类的实现类。</p><p>框架默认的 <code>TextInputFormat</code> 切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p><code>CombineTextInputFormat</code> 用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个 MapTask 处理。</p><h2 id="虚拟存储切片设置最大值" tabindex="-1"><a class="header-anchor" href="#虚拟存储切片设置最大值"><span>虚拟存储切片设置最大值</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CombineTextInputFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxInputSplitSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(job, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4194304</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 4MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值</p><p>注意：这里设置的是虚拟存储切片，并不是实际的切片大小。</p><h2 id="切片机制" tabindex="-1"><a class="header-anchor" href="#切片机制"><span>切片机制</span></a></h2><p>生成切片过程包括：<code>虚拟存储过程</code> 和 <code>切片过程</code> 两部分</p><p>例如现在有a、b、c、d四个文件，它们的大小分别是<strong>1.7M</strong>、<strong>5.1M</strong>、<strong>3.4M</strong>、<strong>6.8M</strong></p><h3 id="虚拟存储过程" tabindex="-1"><a class="header-anchor" href="#虚拟存储过程"><span>虚拟存储过程</span></a></h3><p>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize 值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块;当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块(防止出现太小切片)。</p><p>例如 setMaxInputSplitSize 值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为 4.02M，如果按照4M 逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M 文件切分成(2.01M和2.01M)两个文件。</p><p>拿上面的4MB举例子，这里的虚拟存储过程如下：</p><p>a文件大小1.7M 小于 4M，划分一块<br> b文件大小5.1M 大于 4M 但是 小于 2<em>4M，划分两块，<strong>每块2.55M</strong><br> c文件大小3.4M 小于 4M，划分一块<br> d文件大小6.8M 大于 4M 但是 小于 2</em>4M，划分两块，<strong>每块3.4M</strong></p><h3 id="切片过程" tabindex="-1"><a class="header-anchor" href="#切片过程"><span>切片过程</span></a></h3><ol><li>判断虚拟存储的文件大小是否大于 <code>setMaxInputSplitSize</code> 值，大于等于则单独形成一个切片。</li><li>如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片</li></ol><p>所以这里最终会形成三个切片：(1.7 + 2.55)M、(2.55 + 3.4)M、(3.4 + 3.4)M</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：这里整合切片的顺序不是按照从小到大合并的，而是在一开始文件排序、进入虚拟存储过程后，进行合并的</p></div><p>(a)判断虚拟存储的文件大小是否大于 setMaxInputSplitSize 值，大于等于则单独形成一个切片。←<br> (b)如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。“(c)测试举例:有 4个小文件大小分别为 1.7M、5.1M、3.4M 以及 6.8M 这四个小</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><p>依照前面的示例，进行改动，共改变了三部分，这里不进行赘述</p><ol><li>设置实现类</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 设置实现类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">job</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setInputFormatClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CombineFileInputFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>设置虚拟存储切片</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 设置虚拟存储切片</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CombineTextInputFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxInputSplitSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(job, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4194304</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 4MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>准备对应的文件，改变输入文件地址（地址可以为文件夹）</li></ol>`,30),l=[n];function p(o,r){return t(),e("div",null,l)}const c=i(s,[["render",p],["__file","CombineTextInputFormat.html.vue"]]),k=JSON.parse('{"path":"/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/MapReduce%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%90%E7%AE%97%E7%A8%8B%E5%BA%8F/InputFormat/FileInputFormat%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB/CombineTextInputFormat.html","title":"CombineTextInputFormat","lang":"zh-CN","frontmatter":{"title":"CombineTextInputFormat","order":40,"description":"org.apache.hadoop.mapreduce.lib.input 包下的 CombineTextInputFormat 是 同包下的 CombineFileInputFormat 类 的实现类 而 CombineFileInputFormat 类，才是 FileInputFormat 的实现类 所以我们这里说的是 FileInputForma...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/MapReduce%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%90%E7%AE%97%E7%A8%8B%E5%BA%8F/InputFormat/FileInputFormat%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB/CombineTextInputFormat.html"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"CombineTextInputFormat"}],["meta",{"property":"og:description","content":"org.apache.hadoop.mapreduce.lib.input 包下的 CombineTextInputFormat 是 同包下的 CombineFileInputFormat 类 的实现类 而 CombineFileInputFormat 类，才是 FileInputFormat 的实现类 所以我们这里说的是 FileInputForma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-16T11:31:59.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-06-16T11:31:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CombineTextInputFormat\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-16T11:31:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"虚拟存储切片设置最大值","slug":"虚拟存储切片设置最大值","link":"#虚拟存储切片设置最大值","children":[]},{"level":2,"title":"切片机制","slug":"切片机制","link":"#切片机制","children":[{"level":3,"title":"虚拟存储过程","slug":"虚拟存储过程","link":"#虚拟存储过程","children":[]},{"level":3,"title":"切片过程","slug":"切片过程","link":"#切片过程","children":[]}]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]}],"git":{"createdTime":1716454133000,"updatedTime":1718537519000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"大数据/Hadoop分布式存储框架/MapReduce分布式运算程序/InputFormat/FileInputFormat的实现类/CombineTextInputFormat.md","localizedDate":"2024年5月23日","autoDesc":true}');export{c as comp,k as data};
