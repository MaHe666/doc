import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as p,d as e,e as o,a as n,f as t}from"./app-C3cpgYMU.js";const s={},a=e("h2",{id:"性能测试的价值及目的",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#性能测试的价值及目的"},[e("span",null,"性能测试的价值及目的")])],-1),r=e("p",null,[o("常用的性能测试软件是 "),e("code",null,"JMeter"),o(" 和 "),e("code",null,"Loadrunner"),o("，在并发量不高的情况下，这两个完全够用")],-1),h={class:"hint-container tip"},u=e("p",{class:"hint-container-title"},"提示",-1),_={href:"https://zhuanlan.zhihu.com/p/326490357",target:"_blank",rel:"noopener noreferrer"},P=e("p",null,"适用于大并发量，百万级以上时使用",-1),S=t('<p>性能测试工具通过特定的方式对<strong>不同情景</strong>下的系统施加一定的压力：<code>正常</code>、<code>异常负载</code>、<code>峰值</code> 等，得到各项指标。保证系统的性能需求</p><p>说白了，就是看看系统在面对双十一、春节等高并发情况时能不能顶得住。主要评估的内容如下</p><ul><li><code>评估系统的能力</code>：例如响应的时长等，是否达到标准</li><li><code>识别系统的弱点</code>：查找影响系统性能的问题都是什么，然后解决问题，在有限的预算里达到最优的解决方案</li><li><code>检查隐藏的问题</code>：高并发时，系统或硬件是否会引发正常情况下没有暴露出来的问题</li><li><code>检验系统稳定性</code>：长期高压力下如果能顶得住，才是真的顶得住</li></ul><h2 id="性能测试的指标及测算" tabindex="-1"><a class="header-anchor" href="#性能测试的指标及测算"><span>性能测试的指标及测算</span></a></h2><p>相关博客：</p>',5),f={href:"https://cloud.tencent.com/developer/article/1807423",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/575687250",target:"_blank",rel:"noopener noreferrer"},T=t('<h3 id="自己的理解" tabindex="-1"><a class="header-anchor" href="#自己的理解"><span>自己的理解</span></a></h3><ul><li><p><code>虚拟用户数</code>：最简单的理解就是每个用户都是一个线程。在JMeter中就是用线程来模拟用户的。<br><code>RPS模式下的虚拟用户数 = RPS x RT（秒）。</code></p></li><li><p><code>并发数</code>：系统能<code>同时</code>处理的请求数量，也反应了系统的负载能力</p></li><li><p><code>事务</code>：、一个事务是指一个客户端向服务器发送请求然后服务器做出响应的过程。</p></li><li><p><code>场景</code>：不同的场景中，测试用例执行时间，线程数等都不同。比如稳定性测试等</p></li><li><p><code>响应时间</code>：执行一个请求从开始到最后收到响应数据所花费的总体时间,即从客户端发起请求到收到服务器响应结果的时间。</p></li><li><p><code>TPS</code>：客户端在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。<br><code>TPS=事务数/秒</code></p></li></ul><p>计算需要的TPS，示例如下:</p><p>例如今年的销量最高的一天进行了 <code>10,0000</code> 笔交易，需要计算明年需要的tps是多少才算达标</p><div class="hint-container info"><p class="hint-container-title">没有详细数据</p><p>一天有 <code>24*60*60=86400</code> 秒，所以TPS就是 <code>10,0000/86400=1.157</code>，接近1.2</p><p>但是根据<code>二八定律</code>：假定80%的事务是在20%的时间内完成的。</p><p>那么计算结果就是 <code>(10,0000 * 0.8) / (86400 * 0.2) = 4.629</code>，也就是今年的TPS数值是4.6</p></div><div class="hint-container info"><p class="hint-container-title">有更详细数据</p><p>例如那 <code>10,0000</code> 笔交易，其中有 <code>5,0000</code> 笔交易是在一小时内完成的</p><p>那么计算结果就是 <code>5,0000 / (1*60*60) = 13.88</code>，也就是今年的TPS数值是13.9</p></div><p>常规的业务增长量在30%左右，计算明年的TPS就是：<code>(规定时间内单量 * 130%) / 规定时间秒数 = 明年需要的TPS</code></p><ul><li><code>QPS</code>：(Queries Per Second) 每秒查询率。QPS基本类似于TPS，但是不同的是，对于一个Web页面的一次访问，形成一个TPS（就做一件事儿，打开Web网页）；但一次Web页面请求，可能产生多次对服务器的请求（html、css、js、images、files等），服务器对这些请求，就可计入QPS之中。每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</li></ul><p>衡量信息检索系统（例如搜索引擎或数据库）在一秒钟内接收到的搜索流量的一种常见度量。该术语在任何请求-响应系统中都得到更广泛的使用，更正确地称为每秒请求数。高性能、高并发、高可用（简称“三高”）要求的系统必须注意其QPS，才能知道何时扩容系统以处理更多请求。</p><div class="hint-container tip"><p class="hint-container-title">QPS和TPS</p><p>QPS基本类似于TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”</p></div><ul><li><p><code>RPS</code>：(Requests Per Second) 每秒处理请求率</p></li><li><p><code>HPS</code>：每秒发起的请求率（真正的客户在界面上的点击次数），这个是基于客户端的，前面三个是基于服务端的</p></li><li><p><code>吞吐量</code>：指系统在单位时间内处理请求的数量，表现了一个系统的承压能力。与request对CPU的消耗、外部接口、IO等等紧密关联。单个request 对CPU消耗越高，外部系统接口、IO速度越慢，系统吞吐能力越低，反之越高。</p></li></ul>',11);function v(x,b){const c=l("ExternalLinkIcon");return i(),p("div",null,[a,r,e("div",h,[u,e("p",null,[o("大型测试工具PTS简介："),e("a",_,[o("https://zhuanlan.zhihu.com/p/326490357"),n(c)])]),P]),S,e("ul",null,[e("li",null,[e("a",f,[o("https://cloud.tencent.com/developer/article/1807423"),n(c)])]),e("li",null,[e("a",m,[o("https://zhuanlan.zhihu.com/p/575687250"),n(c)])])]),T])}const k=d(s,[["render",v],["__file","index.html.vue"]]);export{k as default};
