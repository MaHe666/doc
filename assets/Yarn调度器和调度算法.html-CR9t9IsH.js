import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as r,f as t}from"./app-_JAIXX3j.js";const l={},i=t('<h2 id="yarn调度器" tabindex="-1"><a class="header-anchor" href="#yarn调度器"><span>YARN调度器</span></a></h2><p>YARN（Yet Another Resource Negotiator）中的调度器是负责资源分配的关键组件，它决定了应用程序在集群中如何获取和使用资源。YARN提供了几种内置的调度器，每种调度器都采用了不同的调度算法，以适应不同的业务需求和资源管理策略。以下是一些主要的YARN调度器及其调度算法的介绍：</p><h3 id="fifo-scheduler-先进先出调度器" tabindex="-1"><a class="header-anchor" href="#fifo-scheduler-先进先出调度器"><span>FIFO Scheduler（先进先出调度器）</span></a></h3><ul><li><p><strong>算法特点</strong>：这是YARN中最简单的调度器，它按照应用程序提交的顺序来分配资源。第一个提交的应用程序将获得所有可用资源，直到它完成或释放资源，下一个应用程序才会开始运行。</p></li><li><p><strong>示例</strong>：如果一个集群中连续提交了三个应用程序，那么第一个应用程序将使用所有资源，直到它完成，然后第二个应用程序开始运行，以此类推。这种调度方式适用于不需要复杂资源管理和优先级的环境。</p></li></ul><h3 id="capacity-scheduler-容量调度器" tabindex="-1"><a class="header-anchor" href="#capacity-scheduler-容量调度器"><span>Capacity Scheduler（容量调度器）</span></a></h3><ul><li><p><strong>算法特点</strong>：Capacity Scheduler是一种基于层次化的调度器，它允许管理员将集群资源划分给不同的队列，每个队列代表一个组织或部门，可以设置最小和最大资源保证。这种调度方式保证了资源的公平分配，同时也支持优先级较高的队列在资源紧张时获得更多的份额。</p></li><li><p><strong>示例</strong>：假设有一个集群，管理员设置了两个队列，QueueA和QueueB，分别分配了50%的集群资源。当QueueA的作业较少，而QueueB的作业较多时，QueueB可以使用超过50%的资源，直到达到其最大限制。</p></li></ul><h3 id="fair-scheduler-公平调度器" tabindex="-1"><a class="header-anchor" href="#fair-scheduler-公平调度器"><span>Fair Scheduler（公平调度器）</span></a></h3><ul><li><p><strong>算法特点</strong>：Fair Scheduler旨在实现所有应用程序之间的公平资源分配。在资源充足时，所有应用程序都会获得相等的资源份额；在资源紧张时，则会根据应用程序的资源需求动态调整分配比例，尽量保证每个应用程序都能获得一定的资源。</p></li><li><p><strong>示例</strong>：在一个有多个同时运行的应用程序的集群中，如果某个应用程序突然增加了资源需求，Fair Scheduler会重新分配资源，确保所有应用程序都能得到公平对待，即使这意味着某些应用程序的资源会被稍微减少。</p></li></ul><h3 id="preemptive-scheduler-抢占式调度器" tabindex="-1"><a class="header-anchor" href="#preemptive-scheduler-抢占式调度器"><span>Preemptive Scheduler（抢占式调度器）</span></a></h3><ul><li><p><strong>算法特点</strong>：虽然YARN本身不直接提供抢占式调度器，但通过配置，Capacity Scheduler和Fair Scheduler可以支持抢占式调度。这意味着高优先级的应用程序可以抢占低优先级应用程序正在使用的资源。</p></li><li><p><strong>示例</strong>：在一个使用抢占式调度的集群中，如果一个高优先级的批处理作业需要紧急运行，它可以抢占正在运行的低优先级在线服务的资源，以确保批处理作业能够尽快完成。</p></li></ul><p>每种调度器都有其适用场景和优缺点，管理员应根据集群的具体需求和业务特性来选择最合适的调度策略。例如，Capacity Scheduler适合于需要保证资源隔离和公平性的多租户环境，而Fair Scheduler则更适合于需要在多个应用程序之间实现动态资源平衡的场景。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>每种调度器都有其适用场景和优缺点，管理员应根据集群的具体需求和业务特性来选择最合适的调度策略。例如，Capacity Scheduler适合于需要保证资源隔离和公平性的多租户环境，而Fair Scheduler则更适合于需要在多个应用程序之间实现动态资源平衡的场景。</p><h2 id="默认调度器" tabindex="-1"><a class="header-anchor" href="#默认调度器"><span>默认调度器</span></a></h2><p>在Hadoop和CDH中，默认的调度器有所不同：</p><h3 id="hadoop" tabindex="-1"><a class="header-anchor" href="#hadoop"><span>Hadoop</span></a></h3><p>对于Apache Hadoop，自Hadoop 2.x版本以来，<strong>Capacity Scheduler</strong> 成为了默认的资源调度器。这个调度器支持多层次的队列管理，允许不同的队列有不同的资源容量保证，这非常适合多租户环境，其中多个用户或团队共享集群资源。</p><h3 id="cdh-cloudera-distribution-including-apache-hadoop" tabindex="-1"><a class="header-anchor" href="#cdh-cloudera-distribution-including-apache-hadoop"><span>CDH (Cloudera Distribution Including Apache Hadoop)</span></a></h3><p>在Cloudera的Hadoop发行版CDH中，默认的调度器是<strong>Fair Scheduler</strong>。Fair Scheduler旨在公平地分配集群资源给所有的运行中的应用程序，当资源充足时，每个应用程序都将获得相同的资源份额；当资源紧张时，调度器会根据每个应用程序的资源需求动态调整分配，确保公平性。</p><p>然而，需要注意的是，随着Cloudera和其他Hadoop发行商的版本更新，这些默认设置可能会有所变化。例如，Cloudera可能在某些新版本中采用Capacity Scheduler作为默认调度器，或者提供一种机制让用户更灵活地选择调度器。</p><p>在具体部署和使用时，管理员可以依据自己的需求通过修改配置文件（如<code>yarn-site.xml</code>）来改变默认的调度器设置。例如，将默认调度器从Capacity Scheduler更改为Fair Scheduler，或反之亦然，只需设置<code>yarn.resourcemanager.scheduler.class</code>属性为相应的调度器类名即可。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>200台服务器以上，用公平调度器。200台及以下，用容量调度器即可</p>',23),o=[i];function c(n,d){return r(),a("div",null,o)}const s=e(l,[["render",c],["__file","Yarn调度器和调度算法.html.vue"]]),u=JSON.parse('{"path":"/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/Yarn%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6%E5%99%A8/Yarn%E8%B0%83%E5%BA%A6%E5%99%A8%E5%92%8C%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95.html","title":"Yarn调度器和调度算法","lang":"zh-CN","frontmatter":{"title":"Yarn调度器和调度算法","order":20,"description":"YARN调度器 YARN（Yet Another Resource Negotiator）中的调度器是负责资源分配的关键组件，它决定了应用程序在集群中如何获取和使用资源。YARN提供了几种内置的调度器，每种调度器都采用了不同的调度算法，以适应不同的业务需求和资源管理策略。以下是一些主要的YARN调度器及其调度算法的介绍： FIFO Scheduler（...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/Yarn%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6%E5%99%A8/Yarn%E8%B0%83%E5%BA%A6%E5%99%A8%E5%92%8C%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"Yarn调度器和调度算法"}],["meta",{"property":"og:description","content":"YARN调度器 YARN（Yet Another Resource Negotiator）中的调度器是负责资源分配的关键组件，它决定了应用程序在集群中如何获取和使用资源。YARN提供了几种内置的调度器，每种调度器都采用了不同的调度算法，以适应不同的业务需求和资源管理策略。以下是一些主要的YARN调度器及其调度算法的介绍： FIFO Scheduler（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T01:05:05.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-06-27T01:05:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Yarn调度器和调度算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-27T01:05:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"YARN调度器","slug":"yarn调度器","link":"#yarn调度器","children":[{"level":3,"title":"FIFO Scheduler（先进先出调度器）","slug":"fifo-scheduler-先进先出调度器","link":"#fifo-scheduler-先进先出调度器","children":[]},{"level":3,"title":"Capacity Scheduler（容量调度器）","slug":"capacity-scheduler-容量调度器","link":"#capacity-scheduler-容量调度器","children":[]},{"level":3,"title":"Fair Scheduler（公平调度器）","slug":"fair-scheduler-公平调度器","link":"#fair-scheduler-公平调度器","children":[]},{"level":3,"title":"Preemptive Scheduler（抢占式调度器）","slug":"preemptive-scheduler-抢占式调度器","link":"#preemptive-scheduler-抢占式调度器","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"默认调度器","slug":"默认调度器","link":"#默认调度器","children":[{"level":3,"title":"Hadoop","slug":"hadoop","link":"#hadoop","children":[]},{"level":3,"title":"CDH (Cloudera Distribution Including Apache Hadoop)","slug":"cdh-cloudera-distribution-including-apache-hadoop","link":"#cdh-cloudera-distribution-including-apache-hadoop","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]}],"git":{"createdTime":1719450305000,"updatedTime":1719450305000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"大数据/Hadoop分布式存储框架/Yarn资源调度器/Yarn调度器和调度算法.md","localizedDate":"2024年6月27日","autoDesc":true}');export{s as comp,u as data};
