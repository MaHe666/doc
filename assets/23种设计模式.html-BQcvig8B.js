const e=JSON.parse('{"key":"v-c221d784","path":"/Program/%E5%90%8E%E7%AB%AF/Java/JavaSE%E5%9F%BA%E7%A1%80/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"23种设计模式","lang":"zh-CN","frontmatter":{"title":"23种设计模式","order":40,"description":"菜鸟教程 设计模式教程： 设计模式的六大原则 1. 开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2. 里...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/Program/%E5%90%8E%E7%AB%AF/Java/JavaSE%E5%9F%BA%E7%A1%80/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"23种设计模式"}],["meta",{"property":"og:description","content":"菜鸟教程 设计模式教程： 设计模式的六大原则 1. 开闭原则（Open Close Principle） 开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。 2. 里..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-09T08:41:27.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2023-06-09T08:41:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"23种设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-09T08:41:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"附件","slug":"附件","link":"#附件","children":[]}],"git":{"createdTime":1686300087000,"updatedTime":1686300087000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"Program/后端/Java/JavaSE基础/23种设计模式.md","localizedDate":"2023年6月9日","autoDesc":true}');export{e as data};
