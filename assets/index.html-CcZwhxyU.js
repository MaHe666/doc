import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,f as a}from"./app-_JAIXX3j.js";const e={},n=a(`<div class="hint-container warning"><p class="hint-container-title">注意！</p><p>该组件是基于Java语言的</p></div><p>官网：<a href="https://testng.org/" target="_blank" rel="noopener noreferrer">https://testng.org/</a></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>相关博客，<strong>墙裂推荐</strong>：<a href="https://www.jianshu.com/p/8b382ea49021" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/8b382ea49021</a></p></div><div class="hint-container tip"><p class="hint-container-title">Maven依赖</p><p>mvn仓库地址：<a href="https://mvnrepository.com/artifact/org.testng/testng" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/artifact/org.testng/testng</a></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.testng&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;testng&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;7.9.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这个版本的testng要求 <code>jdk11</code> 及以上</p></div></div><h2 id="hello-testng" tabindex="-1"><a class="header-anchor" href="#hello-testng"><span>Hello TestNG</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>下述代码应存放在 <code>src/test</code> 下，<strong>而不是</strong>在 <code>src/main</code> 下</p></div><p><code>TestNGHelloWorld.java</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.testng.annotations.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestNGHelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;setUp!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> helloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;TestNGHelloWorld!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AfterClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tearDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tearDown!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里直接右键运行就行</p><h2 id="testng注解" tabindex="-1"><a class="header-anchor" href="#testng注解"><span>TestNG注解</span></a></h2><table><thead><tr><th>注解/属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>@BeforeSuite</strong></td><td>带@BeforeSuite注释的方法将在本套件中所有测试运行之前运行。</td></tr><tr><td><strong>@AfterSuite</strong></td><td>带@AfterSuite注释的方法将在本套件中所有测试运行之后运行。</td></tr><tr><td><strong>@BeforeTest</strong></td><td>@BeforeTest注解的方法将在testNG.xml文件test标签内的所有类方法运行前执行。</td></tr><tr><td><strong>@AfterTest</strong></td><td>@AfterTest注解的方法将在testNG.xml文件test标签内的所有类方法运行后执行。</td></tr><tr><td><strong>@BeforeGroups</strong></td><td>被@BeforeGroups注解的方法会在组列表中之前被调用。</td></tr><tr><td><strong>@AfterGroups</strong></td><td>被@AfterGroups注解的方法会在组列表中之后被调用。</td></tr><tr><td><strong>@BeforeClass</strong></td><td>在调用当前类中的第一个测试方法之前，将运行带@BeforeClass注释的方法。</td></tr><tr><td><strong>@AfterClass</strong></td><td>在运行当前类中的所有测试方法之后，将运行带@AfterClass注释的方法。</td></tr><tr><td><strong>@BeforeMethod</strong></td><td>@BeforeMethod注释的方法将在每个测试方法之前运行。</td></tr><tr><td><strong>@AfterMethod</strong></td><td>@AfterMethod注释的方法将在每个测试方法之后运行。</td></tr><tr><td>alwaysRun</td><td>对于在方法之前的调用(BeforeSuite,...除了beforeGroups)，若为true，这个配置方法无视其所属的组而运行.对于在方法之后的调用(afterSuite, afterClass, ...)，若为true， 这个配置方法会运行，即使其之前一个或者多个被调用的方法失败或者被跳过。</td></tr><tr><td>dependsOnGroups</td><td>方法依赖的组列表。</td></tr><tr><td>dependsOnMethods</td><td>方法依赖的方法列表。</td></tr><tr><td>enabled</td><td>是否执行注解的测试。</td></tr><tr><td>groups</td><td>类/方法所属的组列表。</td></tr><tr><td>inheritGroups</td><td>默认是true，则此方法会从属于在类级由@Test注解中所指定的组。举例如下：<br><strong>@Test(groups = &quot;Tomandy&quot;) <br>public class TestNGHelloWorld { <br>//如果xml文件配置按Tomandy组执行的话，@BeforeClass注解的方法不会被执行<br>@BeforeClass(inheritGroups = false) <br>public void setUp(){ <br>System.out.println(&quot;setUp!&quot;); <br>} <br>@Test(groups = &quot;Tom&quot;) <br>public void helloWorld(){ <br>System.out.println(&quot;My first TestNG testCase!&quot;); <br>} <br>}</strong></td></tr><tr><td>onlyForGroups</td><td>只适用于@BeforeMethod和@AfterMethod。如果指定了，那么只有当相应的测试方法属于所列的组之一时，才会调用这个setup/teardown方法。</td></tr><tr><td><strong>@DataProvider</strong></td><td>将方法标记为测试方法提供数据。带@DataProvider注释的方法必须返回一个对象[][]。想要从这个DataProvider接收数据的@Test方法需要使用dataProvider属性，此属性值必须与@DataProvider注解中的名字相同。 <br><strong>@DataProvider(name = &quot;casesProvider&quot;)</strong> <br><strong>@Test(dataProvider = &quot;casesProvider&quot;)</strong></td></tr><tr><td>name</td><td>dataProvider的名称。如果没有提供，默认为@DataProvider标注方法的名称。</td></tr><tr><td>parallel</td><td>默认为false，如果为true，将并行执行测试，可大大提高用例执行效率。</td></tr><tr><td><strong>@Factory</strong></td><td>将方法标记为工厂，该工厂返回将被TestNG用作测试类的对象。方法必须返回对象[]。</td></tr><tr><td><strong>@Listeners</strong></td><td>定义监听器。</td></tr><tr><td>value</td><td>继承org.testng.ITestNGListener的classe数组。继承IAnnotationTransformer和IAnnotationTransformer2的类不允许使用@Listeners，可通过testNG.xml定义。</td></tr><tr><td><strong>@Parameters</strong></td><td>给一个@Test方法传参。</td></tr><tr><td>value</td><td>方法参数的变量列表。</td></tr><tr><td><strong>@Test</strong></td><td>把一个类或者方法标记为测试的一部分。</td></tr><tr><td>alwaysRun</td><td>如果为true，则该测试方法依然会被运行即使其所依赖的方法执行失败。为false的话，则该测试方法会被skip如果其所依赖的方法执行失败。</td></tr><tr><td>dataProvider</td><td>此测试方法的dataProvider的名称。</td></tr><tr><td>dataProviderClass</td><td>查找dataProvider的类。如果没有指定，则在当前测试方法所在的类或者它的基类中去查。如果指定了该属性，则@DataProvider注解的方法需在指定的类上保持静态(static)，举例如下： <br><strong>@DataProvider(name = &quot;casesProvider&quot;) <br>public static Object[][] caseProvider(){}</strong> <br>-------------------------------------------------------- <br><strong>@Test(dataProvider = &quot;casesProvider&quot;, dataProviderClass = CasesDataProvider.class)</strong> <br><strong>public void runCases(){}</strong></td></tr><tr><td>dependsOnGroups</td><td>方法依赖的组列表。</td></tr><tr><td>dependsOnMethods</td><td>方法依赖的方法列表。</td></tr><tr><td>description</td><td>方法描述。</td></tr><tr><td>enabled</td><td>是否执行@Test()注解的测试。</td></tr><tr><td>expectedExceptions</td><td>期望测试方法抛出的异常列表。如果没有异常或在此列表中没有异常，则此测试将被标记为失败。</td></tr><tr><td>groups</td><td>类/方法所属的组列表。</td></tr><tr><td>invocationCount</td><td>调用方法的次数。</td></tr><tr><td>invocationTimeOut</td><td>当前测试中所有调用累计时间的最大毫秒数。如果invocationCount属性没有指定，那么此属性会被忽略。</td></tr><tr><td>priority</td><td>标注测试方法的优先级。较低的优先级将优先执行。</td></tr><tr><td>successPercentage</td><td>当前方法执行所期望的成功率。</td></tr><tr><td>singleThreaded</td><td>如果设置为true，那么这个测试类中的所有方法都保证在同一个线程中运行，即使测试当前使用parallel=&quot;methods&quot;运行。这个属性只能在类级别使用，如果在方法级别使用，它将被忽略</td></tr><tr><td>timeOut</td><td>当前测试需要的最大毫秒数，超过该时间则执行失败。</td></tr><tr><td>threadPoolSize</td><td>此方法的线程池的大小。该方法将根据invocationCount值，启用多个线程调用。如果没有指定invocationCount，则忽略此属性。</td></tr></tbody></table><h2 id="assert断言" tabindex="-1"><a class="header-anchor" href="#assert断言"><span>Assert断言</span></a></h2><p>源文件是 <code>org.testng.Assert</code> 类</p><p>里面用法大概为</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 断言为真</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 一个返回布尔值的表达式 （例如某个变量是否为空）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertTrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 断言相等</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> actual </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 实际结果</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> expected </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 预期结果</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(actual, expected);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 断言不为空</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertNotNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,17),r=[n];function l(d,h){return i(),t("div",null,r)}const o=s(e,[["render",l],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/TestNG/","title":"TestNG","lang":"zh-CN","frontmatter":{"title":"TestNG","dir":{"order":10,"link":true,"text":"TestNG"},"description":"注意！ 该组件是基于Java语言的 官网：https://testng.org/ 提示 相关博客，墙裂推荐：https://www.jianshu.com/p/8b382ea49021 Maven依赖 mvn仓库地址：https://mvnrepository.com/artifact/org.testng/testng 注意 这个版本的testng要...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E6%B5%8B%E8%AF%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/TestNG/"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"TestNG"}],["meta",{"property":"og:description","content":"注意！ 该组件是基于Java语言的 官网：https://testng.org/ 提示 相关博客，墙裂推荐：https://www.jianshu.com/p/8b382ea49021 Maven依赖 mvn仓库地址：https://mvnrepository.com/artifact/org.testng/testng 注意 这个版本的testng要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-16T11:31:59.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-06-16T11:31:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TestNG\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-16T11:31:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"Hello TestNG","slug":"hello-testng","link":"#hello-testng","children":[]},{"level":2,"title":"TestNG注解","slug":"testng注解","link":"#testng注解","children":[]},{"level":2,"title":"Assert断言","slug":"assert断言","link":"#assert断言","children":[]}],"git":{"createdTime":1707187431000,"updatedTime":1718537519000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"测试/自动化测试/单元测试/TestNG/README.md","localizedDate":"2024年2月6日","autoDesc":true}');export{o as comp,g as data};
