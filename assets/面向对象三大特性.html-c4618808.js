import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c,d as n,e as o,a as l,f as s}from"./app-4924e820.js";const i={},u=s('<p>Java 面向对象编程三大特性：封装 继承 多态</p><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><p>封装隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性</p><p>封装的好处：</p><ol><li><p>模块化：一个对象的源代码可以独立于其他对象的源代码来编写和维护。一旦创建，一个对象就可以很容易地在系统内部传递。</p></li><li><p>信息隐藏：通过仅与对象的方法交互，其内部实现的细节对外界保持隐藏状态。</p></li><li><p>代码重用：如果一个对象已经存在（可能是由另一个软件开发人员编写的），您可以在您的程序中使用该对象。这允许专家实施/测试/调试复杂的、特定于任务的对象，然后您可以相信这些对象可以在您自己的代码中运行。</p></li><li><p>可插入性和调试容易：如果某个特定对象被证明是有问题的，您可以简单地将它从您的应用程序中删除并插入一个不同的对象作为它的替代品。这类似于解决现实世界中的机械问题。如果螺栓断裂，您可以更换它，而不是整台机器。</p></li></ol><p>现在 <code>封装</code> 在项目中的体现已经不那么明显了，之前的封装主要是指将程序打成<code>dll</code>文件，其他程序员如果需要的话，直接调用就好，<code>dll</code>文件里的内容根本看不到</p><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h3><p>相关博客：</p>',9),d={href:"https://blog.csdn.net/weixin_42188778/article/details/124528421",target:"_blank",rel:"noopener noreferrer"},k=s(`<h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>继承这两个字可能会让人们想到父子关系，但是我个人对“继承”两个字的理解是，站在巨人的肩膀上更进一步</p><p>按照如此理解的话，“巨人”在Java中就被称为 父类、超类或基类；站在基类肩膀的类就称作 子类或导出类</p><p>基类可以被认为是一个“泛化”的类，而子类是具体的实现</p><p>例如在处理图形的时候，我们可以创建一个<code>几何形</code>的类，将一些通用的方法都写在该类里</p><p>然后我们在处理具体的图形的时候，可以使它们继承<code>几何形</code>这个类，例如：三角形，正方形，五角形</p><p>这些导出类的方法拥有父类的方法后，可以默认使用父类的方法逻辑，也可以拥有自己独特的方法逻辑，这个步骤就叫做<strong>重写</strong></p><p>例如获取图形的面积，那么有些图形因为公式的不同，可能就需要拥有自己的处理方式</p><p>而导出类不仅可以覆盖掉基类的方法逻辑，还可以有自己的方法</p><p>例如<code>圆形</code>这个类，就可以有属于自己的方法，去求<code>圆形</code>类的对象的半径和直径</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h2><p>多态存在的意义主要体现在通用性方面，无论子类有多少，通用的逻辑都不变 只需要处理基类就好，详情见代码示例</p><p>我们把导出类当做是基类来处理，这个过程称为向上转型（自动转型）</p><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token comment">// 这里直接将基类作为参数就好，无论子类有多少，都不需要修改通用逻辑</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mainShout</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span>
        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mainShout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mainShout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mainShout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是动物&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喵&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function r(v,m){const a=t("ExternalLinkIcon");return e(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",d,[o("https://blog.csdn.net/weixin_42188778/article/details/124528421"),l(a)])])]),k])}const _=p(i,[["render",r],["__file","面向对象三大特性.html.vue"]]);export{_ as default};
