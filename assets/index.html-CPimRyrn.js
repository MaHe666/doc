import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as r,o as n}from"./app-DSuItX83.js";const s={};function a(p,e){return n(),t("div",null,e[0]||(e[0]=[r(`<p>Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理!</p><p>Spring Security 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架Shiro，它提供了更丰富的功能，社区资源也比Shiro丰富。</p><p>官网：<a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-security</a></p><p>文档：<a href="https://docs.spring.io/spring-security/reference/index.html" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-security/reference/index.html</a></p><p>相关文章：<a href="https://blog.csdn.net/qq_42640067/article/details/113062222" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42640067/article/details/113062222</a></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-security&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springsecurity的本质" tabindex="-1"><a class="header-anchor" href="#springsecurity的本质"><span>SpringSecurity的本质</span></a></h2><p>SpringSecurity的本质就是一串过滤器链</p><p>可以通过Idea的debug查看过滤器链中的过滤器链及它们的顺序：</p><ol><li>获取主启动类 <code>SpringApplication.run()</code> 方法的返回值</li><li>在这行语句下方输出返回值，并在这行打上debug断点</li><li>运行到断点之后，点击 <code>Evaluate Expression (Alt + F8)</code></li><li>输入 <code>run.getBean(DefaultSecurityFilterChain.class)</code> 点击Evaluate，过滤器链就展示出来了</li></ol><h2 id="securitycontextholder" tabindex="-1"><a class="header-anchor" href="#securitycontextholder"><span>SecurityContextHolder</span></a></h2><p>SecurityContextHolder 用来获取登录之后用户信息。</p><p>Spring Security 会将登录用户数据保存在 Session 中。</p><p>但是，为了使用方便，Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。</p><p>当用户登录成功后，Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。</p><p>SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。</p><p>当登录请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。</p><p>以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到 SecurityContextHolder 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将 Security SecurityContextHolder 中的数据清空。这一策略非常方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据。</p>`,18)]))}const c=i(s,[["render",a],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Java/SpringSecurity/","title":"SpringSecurity","lang":"zh-CN","frontmatter":{"title":"SpringSecurity","dir":{"order":90,"link":true},"description":"Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理! Spring Security 是 Spring 家族中的一个安全管理框...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Java/SpringSecurity/"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"SpringSecurity"}],["meta",{"property":"og:description","content":"Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理! Spring Security 是 Spring 家族中的一个安全管理框..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T07:43:35.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-07-08T07:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringSecurity\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T07:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"SpringSecurity的本质","slug":"springsecurity的本质","link":"#springsecurity的本质","children":[]},{"level":2,"title":"SecurityContextHolder","slug":"securitycontextholder","link":"#securitycontextholder","children":[]}],"git":{"createdTime":1686300087000,"updatedTime":1720424615000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"编程开发/后端/Java/SpringSecurity/README.md","localizedDate":"2023年6月9日","autoDesc":true}');export{c as comp,d as data};
