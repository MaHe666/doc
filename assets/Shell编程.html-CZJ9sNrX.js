import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as t,d as s,e as a,a as e,f as l}from"./app-BrdzOsc6.js";const p={},d=s("p",null,"相关博客：",-1),r={href:"https://juejin.cn/post/6844903553119748109",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.zhihu.com/tardis/zm/art/102176365",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7143771422618779678",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7130983293347954718",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,"什么是Shell，相关资料：",-1),m={href:"https://baike.baidu.com/item/SHELL%E8%AF%AD%E8%A8%80/22710978",target:"_blank",rel:"noopener noreferrer"},k={href:"https://c.biancheng.net/view/706.html",target:"_blank",rel:"noopener noreferrer"},g=l(`<p><code>SHELL</code> 是 <code>UNIX</code> 系统的用户与操作系统之间的一种接口。它既是UNIX系统的命令解释程序，又是一种高级的命令程序设计语言。</p><p>作为命令解释程序，SHELL接收用户输入的命令，将命令翻译成一个动作序列，然后调用系统过程执行这条命令。</p><h2 id="helloworld" tabindex="-1"><a class="header-anchor" href="#helloworld"><span>HelloWorld</span></a></h2><p>创建名为 <code>hello.sh</code> 的脚本，将如下所有内容放进去（包括第一行注释）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash </span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;hello world!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 方式1</span>
<span class="token function">sh</span> hello.sh

<span class="token comment"># 方式2</span>
<span class="token function">chmod</span> +x hello.sh
./hello.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),f={class:"hint-container tip"},x=l('<p class="hint-container-title">chmod +x 和 chmod -x 命令</p><ul><li><code>chmod +x 文件名</code>：授予执行权限</li><li><code>chmod -x 文件名</code>：删除执行权限</li></ul><p>使用 <code>chmod +x</code> 赋予执行权限的文件，使用 <code>ls</code> 命令查看时，该文件是绿色的，代表可执行文件</p><p>未被授予执行权限的文件，或使用 <code>chmod -x</code> 删除执行权限的文件，使用 <code>ls</code> 命令查看时，该文件是灰色的，代表只是个记录了内容的普通文件，类似于 <code>.txt</code> 或 <code>.xml</code> 文件</p><p>相关博客：</p>',5),_={href:"https://blog.csdn.net/u012106306/article/details/80436911",target:"_blank",rel:"noopener noreferrer"},$={href:"https://blog.csdn.net/qq_29901385/article/details/134022529",target:"_blank",rel:"noopener noreferrer"},w=l(`<div class="hint-container tip"><p class="hint-container-title">helloWorld示例说明</p><ul><li><code>#!</code> 告诉系统这个脚本需要什么解释器来执行。</li><li>文件扩展名 <code>.sh</code> 不是强制要求的，可以没有文件后缀</li><li><code>方法1</code>：直接运行解释器，<code>hello.sh</code> 作为 <code>Shell 解释器</code>的参数。此时<code>Shell 脚本</code>就不需要指定解释器信息，第一行可以不写。</li><li><code>方法2</code>：<code>hello.sh</code> 作为可执行程序运行，<code>Shell 脚本</code>第一行一定要指定解释器。</li></ul></div><h2 id="shell-变量" tabindex="-1"><a class="header-anchor" href="#shell-变量"><span>Shell 变量</span></a></h2><p>Shell 变量分为 <code>系统变量</code> 和 <code>自定义变量</code>。系统变量有<code>$HOME</code>、<code>$PWD</code>、<code>$USER</code>等，显示当前 Shell 中所有变量：<code>set</code>。</p><p>变量名可以由字母、数字、下划线组成，不能以数字开头。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><ul><li><code>使用变量</code>：<code>$变量名</code><br> 输出环境变量<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>定义变量</code>：<code>变量名=变量值</code>，等号两侧不能有空格，变量名一般习惯用大写。<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash </span>
<span class="token assign-left variable">STR</span><span class="token operator">=</span><span class="token string">&#39;HelloWorld&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$STR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>删除变量</code>：<code>unset 变量名</code>。<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash </span>
<span class="token assign-left variable">STR</span><span class="token operator">=</span><span class="token string">&#39;HelloWorld&#39;</span>
<span class="token builtin class-name">unset</span> STR
<span class="token builtin class-name">echo</span> <span class="token variable">$STR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>声明静态变量</code>：<code>readonly 变量名</code>，静态变量不能删除。<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash </span>
<span class="token builtin class-name">readonly</span> <span class="token assign-left variable">STR</span><span class="token operator">=</span><span class="token string">&#39;HelloWorld&#39;</span>
<span class="token builtin class-name">unset</span> STR
<span class="token builtin class-name">echo</span> <span class="token variable">$STR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>上述代码会报错：<code>testVar.sh: 第 3 行:unset: STR: 无法反设定: 只读 variable</code></li></ul><h3 id="将命令返回值赋给变量-重要" tabindex="-1"><a class="header-anchor" href="#将命令返回值赋给变量-重要"><span>将命令返回值赋给变量（重要）</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 反引号，执行里面的命令</span>
<span class="token assign-left variable">VARIABLE1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ls</span><span class="token variable">\`</span></span>

<span class="token comment"># 等价于上句话</span>
<span class="token assign-left variable">VARIABLE2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span>

<span class="token builtin class-name">echo</span> <span class="token variable">$VARIABLE1</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$VARIABLE2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell-环境变量" tabindex="-1"><a class="header-anchor" href="#shell-环境变量"><span>Shell 环境变量</span></a></h3><p><code>/etc/profile</code> 文件里面配置了环境变量，而这个文件里面的代码，是检索了 <code>/etc/profile.d</code> 文件夹下的 <code>.sh</code> 文件，并将检索到的环境变量整合之后，才生效的</p><p>所以，我们为了解耦，可以在 <code>/etc/profile.d</code> 目录下写一个自定义的 <code>.sh</code> 配置文件，然后再刷新 <code>/etc/profile</code> 文件，使配置生效</p><p>在 <code>/etc/profile.d</code> 文件夹下创建 <code>my-env.sh</code> 文件，写上如下内容</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">MY_STR</span><span class="token operator">=</span><span class="token string">&#39;Hello, environment variable&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存退出后，使配置生效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后测试环境变量是否生效</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$MY_STR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="位置参数变量" tabindex="-1"><a class="header-anchor" href="#位置参数变量"><span>位置参数变量</span></a></h3><ul><li><code>$n</code> ：<code>$0</code> 代表命令本身、<code>$1-$9</code> 代表第1到9个参数，10以上参数用花括号，如 <code>\${10}</code>。</li><li><code>$*</code> ：命令行中所有参数，且把所有参数看成一个整体。</li><li><code>$@</code> ：命令行中所有参数，且把每个参数区分对待。</li><li><code>$#</code> ：所有参数个数。</li></ul><p><code>getParam.sh</code> 脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$0</span> <span class="token variable">$1</span> <span class="token variable">$2</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$*</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$@</span>
<span class="token builtin class-name">echo</span> 参数个数<span class="token operator">=</span><span class="token variable">$#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存退出，运行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x getParam.sh

./getParam.sh <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./getParam.sh <span class="token number">10</span> <span class="token number">20</span>
<span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span>
<span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span>
参数个数<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预定义变量" tabindex="-1"><a class="header-anchor" href="#预定义变量"><span>预定义变量</span></a></h3><p>在赋值定义之前，事先在 <code>Shell 脚本</code> 中直接引用的变量。</p><ul><li><code>$$</code> ：当前进程的 PID 进程号。</li><li><code>$!</code> ：后台运行的最后一个进程的 PID 进程号。</li><li><code>$?</code> ：最后一次执行的命令的返回状态，0为执行正确，非0执行失败。</li></ul><p>脚本如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> 当前进程号<span class="token operator">=</span><span class="token variable">$$</span>

<span class="token comment"># 在后台运行程序，该程序在文章上面</span>
./hello.sh <span class="token operator">&amp;</span>

<span class="token builtin class-name">echo</span> 最后一个进程的进程号<span class="token operator">=</span><span class="token variable">$!</span>

<span class="token comment"># hello world!</span>
<span class="token builtin class-name">echo</span> 最后执行的命令结果<span class="token operator">=</span><span class="token variable">$?</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果运行一下就知道了</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p><code>$((运算式))</code> 或 <code>$[运算式]</code></p><p>第三种写法如下</p><p>注意！<code>expr</code> 运算符间要有空格</p><ul><li><code>expr m + n</code>，加法运算。</li><li><code>expr m - n</code>，减法运算。</li><li><code>expr \\*</code>，<code>/</code>，<code>%</code> 分别代表乘，除，取余</li></ul><p>示例如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 第一种方式，$((运算式))</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token variable">))</span></span>

<span class="token comment"># 第二种方式，$[运算式]，推荐这种写法</span>
<span class="token builtin class-name">echo</span> $<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span> + <span class="token number">3</span><span class="token punctuation">)</span> * <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token comment"># 第三种方式 expr </span>
<span class="token assign-left variable">TMP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">3</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $TMP <span class="token punctuation">\\</span>* <span class="token number">4</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支"><span>条件分支</span></a></h2><h3 id="if判断" tabindex="-1"><a class="header-anchor" href="#if判断"><span>if判断</span></a></h3><p>注意，表达式的等号两边<strong>需要有</strong>空格</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 大于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 小于 b&quot;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;没有符合的条件&quot;</span>

<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case分支" tabindex="-1"><a class="header-anchor" href="#case分支"><span>case分支</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
<span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> 第一个参数是1
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> 第一个参数是2
<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> 第一个参数没匹配到对应值
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h2><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;i=&quot;</span><span class="token variable">$i</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
    <span class="token builtin class-name">let</span> <span class="token string">&quot;int++&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function S(q,y){const n=c("ExternalLinkIcon");return o(),t("div",null,[d,s("ul",null,[s("li",null,[s("a",r,[a("https://juejin.cn/post/6844903553119748109"),e(n)])]),s("li",null,[s("a",u,[a("https://www.zhihu.com/tardis/zm/art/102176365"),e(n)])]),s("li",null,[s("a",b,[a("https://juejin.cn/post/7143771422618779678"),e(n)])]),s("li",null,[s("a",v,[a("https://juejin.cn/post/7130983293347954718"),e(n)])])]),h,s("ul",null,[s("li",null,[s("a",m,[a("https://baike.baidu.com/item/SHELL语言/22710978"),e(n)])]),s("li",null,[s("a",k,[a("https://c.biancheng.net/view/706.html"),e(n)])])]),g,s("div",f,[x,s("ul",null,[s("li",null,[s("a",_,[a("https://blog.csdn.net/u012106306/article/details/80436911"),e(n)])]),s("li",null,[s("a",$,[a("https://blog.csdn.net/qq_29901385/article/details/134022529"),e(n)])])])]),w])}const T=i(p,[["render",S],["__file","Shell编程.html.vue"]]);export{T as default};
