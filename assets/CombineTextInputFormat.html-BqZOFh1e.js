import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as e}from"./app-CbLsyo3e.js";const t={},p=e(`<p><code>org.apache.hadoop.mapreduce.lib.input</code> 包下的 <code>CombineTextInputFormat</code> 是 同包下的 <code>CombineFileInputFormat</code> 类 的实现类</p><p>而 <code>CombineFileInputFormat</code> 类，才是 <code>FileInputFormat</code> 的实现类</p><p>所以我们这里说的是 <code>FileInputFormat</code> 的实现类的实现类。</p><p>框架默认的 <code>TextInputFormat</code> 切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p><code>CombineTextInputFormat</code> 用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个 MapTask 处理。</p><h2 id="虚拟存储切片设置最大值" tabindex="-1"><a class="header-anchor" href="#虚拟存储切片设置最大值"><span>虚拟存储切片设置最大值</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">4194304</span><span class="token punctuation">)</span> <span class="token comment">// 4MB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值</p><p>注意：这里设置的是虚拟存储切片，并不是实际的切片大小。</p><h2 id="切片机制" tabindex="-1"><a class="header-anchor" href="#切片机制"><span>切片机制</span></a></h2><p>生成切片过程包括：<code>虚拟存储过程</code> 和 <code>切片过程</code> 两部分</p><p>例如现在有a、b、c、d四个文件，它们的大小分别是<strong>1.7M</strong>、<strong>5.1M</strong>、<strong>3.4M</strong>、<strong>6.8M</strong></p><h3 id="虚拟存储过程" tabindex="-1"><a class="header-anchor" href="#虚拟存储过程"><span>虚拟存储过程</span></a></h3><p>将输入目录下所有文件大小，依次和设置的setMaxInputSplitSize 值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块;当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块(防止出现太小切片)。</p><p>例如 setMaxInputSplitSize 值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为 4.02M，如果按照4M 逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M 文件切分成(2.01M和2.01M)两个文件。</p><p>拿上面的4MB举例子，这里的虚拟存储过程如下：</p><p>a文件大小1.7M 小于 4M，划分一块<br> b文件大小5.1M 大于 4M 但是 小于 2<em>4M，划分两块，<strong>每块2.55M</strong><br> c文件大小3.4M 小于 4M，划分一块<br> d文件大小6.8M 大于 4M 但是 小于 2</em>4M，划分两块，<strong>每块3.4M</strong></p><h3 id="切片过程" tabindex="-1"><a class="header-anchor" href="#切片过程"><span>切片过程</span></a></h3><ol><li>判断虚拟存储的文件大小是否大于 <code>setMaxInputSplitSize</code> 值，大于等于则单独形成一个切片。</li><li>如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片</li></ol><p>所以这里最终会形成三个切片：(1.7 + 2.55)M、(2.55 + 3.4)M、(3.4 + 3.4)M</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：这里整合切片的顺序不是按照从小到大合并的，而是在一开始文件排序、进入虚拟存储过程后，进行合并的</p></div><p>(a)判断虚拟存储的文件大小是否大于 setMaxInputSplitSize 值，大于等于则单独形成一个切片。←<br> (b)如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。“(c)测试举例:有 4个小文件大小分别为 1.7M、5.1M、3.4M 以及 6.8M 这四个小</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><p>依照前面的示例，进行改动，共改变了三部分，这里不进行赘述</p><ol><li>设置实现类</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 设置实现类</span>
job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">CombineFileInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>设置虚拟存储切片</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 设置虚拟存储切片</span>
<span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">4194304</span><span class="token punctuation">)</span> <span class="token comment">// 4MB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>准备对应的文件，改变输入文件地址（地址可以为文件夹）</li></ol>`,30),o=[p];function c(i,l){return n(),s("div",null,o)}const u=a(t,[["render",c],["__file","CombineTextInputFormat.html.vue"]]);export{u as default};
