import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as t}from"./app-CuYmUwPO.js";const n={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<p>控制反转IoC （Inversion of Control），是一种设计思想，<strong>DI（依赖注入）是实现IOC的一种方法</strong></p><p>没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制</p><p>控制反转后将对象的创建转移给第三方，配置之后，想使用对象直接获取就可以，不需要再创建了</p><p>个人认为所谓控制反转就是，获得依赖对象的方式反转了</p><p>IoC是Spring框架的核心内容，使用多种方式完美的实现了IoC，可以使用xml配置，也可以使用注解</p><h2 id="配置文件声明支持注解注册bean" tabindex="-1"><a class="header-anchor" href="#配置文件声明支持注解注册bean"><span>配置文件声明<code>支持注解注册bean</code></span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">context:annotation-config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除了使用上述方法开启全局配置之外，还可以单独声明支持某一个包下的注解</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">context:component-scan</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> base-package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.mahe666&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="autowired-和-resource" tabindex="-1"><a class="header-anchor" href="#autowired-和-resource"><span>@Autowired 和 @Resource</span></a></h2><p>@Autowired注解是通过bean的类型来进行的注入的</p><p>在复杂情况下如果不能满足使用需求的话，可以使用@Qualifier注解通过bean的名称完成注入</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Qualifier</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;dog222&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Resource注解本身就能完成上面两个注解的功能，区别在于：@Resource先判断bean名称，再判断bean的类型</p><p>复杂情况下可按照如下方式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;dog222&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况"><span>特殊情况</span></a></h3><p>在实际情况中可能需要根据执行的具体业务来选择bean的情况</p><p>这时可以选择接收所有 <code>具有共同父类</code> 或 <code>实现共同接口</code> 的bean，再根据业务，通过bean名称进行选择</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> 基类或接口的名字</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个map的key就是实现类的名字，然后就可以通过map对象去get类的对象了</p><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>@Value</span></a></h2><p>给bean的属性注入值，就不需要在xml里面写了</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;马赫666&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过map接收所有实现类" tabindex="-1"><a class="header-anchor" href="#通过map接收所有实现类"><span>通过Map接收所有实现类</span></a></h2><p>相关博客：<a href="https://blog.csdn.net/qq_42567801/article/details/124047293" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42567801/article/details/124047293</a></p>`,26)]))}const d=s(n,[["render",l],["__file","IOC控制反转.html.vue"]]),k=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Java/Spring/IOC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html","title":"IOC控制反转","lang":"zh-CN","frontmatter":{"title":"IOC控制反转","order":10,"description":"控制反转IoC （Inversion of Control），是一种设计思想，DI（依赖注入）是实现IOC的一种方法 没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制 控制反转后将对象的创建转移给第三方，配置之后，想使用对象直接获取就可以，不需要再创建了 个人认为所谓控制反转就是，获得依...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Java/Spring/IOC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"IOC控制反转"}],["meta",{"property":"og:description","content":"控制反转IoC （Inversion of Control），是一种设计思想，DI（依赖注入）是实现IOC的一种方法 没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制 控制反转后将对象的创建转移给第三方，配置之后，想使用对象直接获取就可以，不需要再创建了 个人认为所谓控制反转就是，获得依..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T07:43:35.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-07-08T07:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC控制反转\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T07:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"配置文件声明支持注解注册bean","slug":"配置文件声明支持注解注册bean","link":"#配置文件声明支持注解注册bean","children":[]},{"level":2,"title":"@Autowired 和 @Resource","slug":"autowired-和-resource","link":"#autowired-和-resource","children":[{"level":3,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[]}]},{"level":2,"title":"@Value","slug":"value","link":"#value","children":[]},{"level":2,"title":"通过Map接收所有实现类","slug":"通过map接收所有实现类","link":"#通过map接收所有实现类","children":[]}],"git":{"createdTime":1686300087000,"updatedTime":1720424615000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"编程开发/后端/Java/Spring/IOC控制反转.md","localizedDate":"2023年6月9日","autoDesc":true}');export{d as comp,k as data};
