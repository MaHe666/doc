import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as p,c as d,d as t,e as n,a,f as e}from"./app-DXqT2YIa.js";const c={},i=t("div",{class:"hint-container warning"},[t("p",{class:"hint-container-title"},"注意！"),t("p",null,"该组件是基于Java语言的")],-1),l={href:"https://testng.org/",target:"_blank",rel:"noopener noreferrer"},u={class:"hint-container tip"},v=t("p",{class:"hint-container-title"},"提示",-1),k=t("strong",null,"墙裂推荐",-1),g={href:"https://www.jianshu.com/p/8b382ea49021",target:"_blank",rel:"noopener noreferrer"},m={class:"hint-container tip"},b=t("p",{class:"hint-container-title"},"Maven依赖",-1),h={href:"https://mvnrepository.com/artifact/org.testng/testng",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.testng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>testng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这个版本的testng要求 <code>jdk11</code> 及以上</p></div>`,2),_=e(`<h2 id="hello-testng" tabindex="-1"><a class="header-anchor" href="#hello-testng"><span>Hello TestNG</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>下述代码应存放在 <code>src/test</code> 下，<strong>而不是</strong>在 <code>src/main</code> 下</p></div><p><code>TestNGHelloWorld.java</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNGHelloWorld</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@BeforeClass</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;setUp!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TestNGHelloWorld!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterClass</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;tearDown!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里直接右键运行就行</p><h2 id="testng注解" tabindex="-1"><a class="header-anchor" href="#testng注解"><span>TestNG注解</span></a></h2><table><thead><tr><th>注解/属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>@BeforeSuite</strong></td><td>带@BeforeSuite注释的方法将在本套件中所有测试运行之前运行。</td></tr><tr><td><strong>@AfterSuite</strong></td><td>带@AfterSuite注释的方法将在本套件中所有测试运行之后运行。</td></tr><tr><td><strong>@BeforeTest</strong></td><td>@BeforeTest注解的方法将在testNG.xml文件test标签内的所有类方法运行前执行。</td></tr><tr><td><strong>@AfterTest</strong></td><td>@AfterTest注解的方法将在testNG.xml文件test标签内的所有类方法运行后执行。</td></tr><tr><td><strong>@BeforeGroups</strong></td><td>被@BeforeGroups注解的方法会在组列表中之前被调用。</td></tr><tr><td><strong>@AfterGroups</strong></td><td>被@AfterGroups注解的方法会在组列表中之后被调用。</td></tr><tr><td><strong>@BeforeClass</strong></td><td>在调用当前类中的第一个测试方法之前，将运行带@BeforeClass注释的方法。</td></tr><tr><td><strong>@AfterClass</strong></td><td>在运行当前类中的所有测试方法之后，将运行带@AfterClass注释的方法。</td></tr><tr><td><strong>@BeforeMethod</strong></td><td>@BeforeMethod注释的方法将在每个测试方法之前运行。</td></tr><tr><td><strong>@AfterMethod</strong></td><td>@AfterMethod注释的方法将在每个测试方法之后运行。</td></tr><tr><td>alwaysRun</td><td>对于在方法之前的调用(BeforeSuite,...除了beforeGroups)，若为true，这个配置方法无视其所属的组而运行.对于在方法之后的调用(afterSuite, afterClass, ...)，若为true， 这个配置方法会运行，即使其之前一个或者多个被调用的方法失败或者被跳过。</td></tr><tr><td>dependsOnGroups</td><td>方法依赖的组列表。</td></tr><tr><td>dependsOnMethods</td><td>方法依赖的方法列表。</td></tr><tr><td>enabled</td><td>是否执行注解的测试。</td></tr><tr><td>groups</td><td>类/方法所属的组列表。</td></tr><tr><td>inheritGroups</td><td>默认是true，则此方法会从属于在类级由@Test注解中所指定的组。举例如下：<br><strong>@Test(groups = &quot;Tomandy&quot;) <br>public class TestNGHelloWorld { <br>//如果xml文件配置按Tomandy组执行的话，@BeforeClass注解的方法不会被执行<br>@BeforeClass(inheritGroups = false) <br>public void setUp(){ <br>System.out.println(&quot;setUp!&quot;); <br>} <br>@Test(groups = &quot;Tom&quot;) <br>public void helloWorld(){ <br>System.out.println(&quot;My first TestNG testCase!&quot;); <br>} <br>}</strong></td></tr><tr><td>onlyForGroups</td><td>只适用于@BeforeMethod和@AfterMethod。如果指定了，那么只有当相应的测试方法属于所列的组之一时，才会调用这个setup/teardown方法。</td></tr><tr><td><strong>@DataProvider</strong></td><td>将方法标记为测试方法提供数据。带@DataProvider注释的方法必须返回一个对象[][]。想要从这个DataProvider接收数据的@Test方法需要使用dataProvider属性，此属性值必须与@DataProvider注解中的名字相同。 <br><strong>@DataProvider(name = &quot;casesProvider&quot;)</strong> <br><strong>@Test(dataProvider = &quot;casesProvider&quot;)</strong></td></tr><tr><td>name</td><td>dataProvider的名称。如果没有提供，默认为@DataProvider标注方法的名称。</td></tr><tr><td>parallel</td><td>默认为false，如果为true，将并行执行测试，可大大提高用例执行效率。</td></tr><tr><td><strong>@Factory</strong></td><td>将方法标记为工厂，该工厂返回将被TestNG用作测试类的对象。方法必须返回对象[]。</td></tr><tr><td><strong>@Listeners</strong></td><td>定义监听器。</td></tr><tr><td>value</td><td>继承org.testng.ITestNGListener的classe数组。继承IAnnotationTransformer和IAnnotationTransformer2的类不允许使用@Listeners，可通过testNG.xml定义。</td></tr><tr><td><strong>@Parameters</strong></td><td>给一个@Test方法传参。</td></tr><tr><td>value</td><td>方法参数的变量列表。</td></tr><tr><td><strong>@Test</strong></td><td>把一个类或者方法标记为测试的一部分。</td></tr><tr><td>alwaysRun</td><td>如果为true，则该测试方法依然会被运行即使其所依赖的方法执行失败。为false的话，则该测试方法会被skip如果其所依赖的方法执行失败。</td></tr><tr><td>dataProvider</td><td>此测试方法的dataProvider的名称。</td></tr><tr><td>dataProviderClass</td><td>查找dataProvider的类。如果没有指定，则在当前测试方法所在的类或者它的基类中去查。如果指定了该属性，则@DataProvider注解的方法需在指定的类上保持静态(static)，举例如下： <br><strong>@DataProvider(name = &quot;casesProvider&quot;) <br>public static Object[][] caseProvider(){}</strong> <br>-------------------------------------------------------- <br><strong>@Test(dataProvider = &quot;casesProvider&quot;, dataProviderClass = CasesDataProvider.class)</strong> <br><strong>public void runCases(){}</strong></td></tr><tr><td>dependsOnGroups</td><td>方法依赖的组列表。</td></tr><tr><td>dependsOnMethods</td><td>方法依赖的方法列表。</td></tr><tr><td>description</td><td>方法描述。</td></tr><tr><td>enabled</td><td>是否执行@Test()注解的测试。</td></tr><tr><td>expectedExceptions</td><td>期望测试方法抛出的异常列表。如果没有异常或在此列表中没有异常，则此测试将被标记为失败。</td></tr><tr><td>groups</td><td>类/方法所属的组列表。</td></tr><tr><td>invocationCount</td><td>调用方法的次数。</td></tr><tr><td>invocationTimeOut</td><td>当前测试中所有调用累计时间的最大毫秒数。如果invocationCount属性没有指定，那么此属性会被忽略。</td></tr><tr><td>priority</td><td>标注测试方法的优先级。较低的优先级将优先执行。</td></tr><tr><td>successPercentage</td><td>当前方法执行所期望的成功率。</td></tr><tr><td>singleThreaded</td><td>如果设置为true，那么这个测试类中的所有方法都保证在同一个线程中运行，即使测试当前使用parallel=&quot;methods&quot;运行。这个属性只能在类级别使用，如果在方法级别使用，它将被忽略</td></tr><tr><td>timeOut</td><td>当前测试需要的最大毫秒数，超过该时间则执行失败。</td></tr><tr><td>threadPoolSize</td><td>此方法的线程池的大小。该方法将根据invocationCount值，启用多个线程调用。如果没有指定invocationCount，则忽略此属性。</td></tr></tbody></table><h2 id="assert断言" tabindex="-1"><a class="header-anchor" href="#assert断言"><span>Assert断言</span></a></h2><p>源文件是 <code>org.testng.Assert</code> 类</p><p>里面用法大概为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 断言为真</span>
<span class="token class-name">Boolean</span> result <span class="token operator">=</span> 一个返回布尔值的表达式 （例如某个变量是否为空）<span class="token punctuation">;</span>

<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 断言相等</span>
<span class="token class-name">String</span> actual <span class="token operator">=</span> 实际结果<span class="token punctuation">;</span>
<span class="token class-name">String</span> expected <span class="token operator">=</span> 预期结果<span class="token punctuation">;</span>

<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 断言不为空</span>
<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function T(x,y){const s=r("ExternalLinkIcon");return p(),d("div",null,[i,t("p",null,[n("官网："),t("a",l,[n("https://testng.org/"),a(s)])]),t("div",u,[v,t("p",null,[n("相关博客，"),k,n("："),t("a",g,[n("https://www.jianshu.com/p/8b382ea49021"),a(s)])])]),t("div",m,[b,t("p",null,[n("mvn仓库地址："),t("a",h,[n("https://mvnrepository.com/artifact/org.testng/testng"),a(s)])]),f]),_])}const w=o(c,[["render",T],["__file","index.html.vue"]]);export{w as default};
