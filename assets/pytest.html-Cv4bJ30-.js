import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as o,d as n,e as s,a as t,b as l,f as a}from"./app-BJ-DeeH6.js";const d={},u=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"注意！"),n("p",null,"该组件是基于Python语言的")],-1),r={href:"https://pytest.org/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><p>插件是需要单独使用 <code>pip</code> 下载的，使用插件之前需要确保pytest本体已经安装完毕</p>`,3),v={href:"https://docs.pytest.org/en/stable/reference/plugin_list.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>常用插件如下</p><ul><li><code>pytest-html</code> 生成html报告</li><li><code>pytest-xdist</code> 分布式执行（多线程执行）</li><li><code>pytest-order</code> 控制用例的执行顺序</li><li><code>pytest-rerunfailures</code> 重新运行失败用例</li><li><code>pytest-base-url</code> 设置基础路径（开发、测试、生产、预发布）</li><li><code>allure-pytest</code> 生成allure报告</li><li><code>pytest-dependency</code> 用例依赖，上级用例出错后，避免执行有关联的下级用例</li><li><code>pytest-assume</code> 多重断言</li></ul><h2 id="用例规范" tabindex="-1"><a class="header-anchor" href="#用例规范"><span>用例规范</span></a></h2><ol><li>模块名 必须以 <code>test_</code> 开头 或 以 <code>_test</code> 结尾</li><li>类名 必须以 <code>Test</code> 开头，且<strong>不能</strong>有 <code>init方法</code></li><li>用例方法必须以 <code>test_</code> 开头</li></ol><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h2><p>满足规范之后，直接在项目根目录下，打开命令行，输入<code>pytest</code>，用例就会自动执行</p><p>更快捷的方式是在项目根目录下，创建一个 <code>run.py</code> 文件</p><p>文件中保存如下代码作为入口，每次测试的时候，运行如下代码即可</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行参数" tabindex="-1"><a class="header-anchor" href="#执行参数"><span>执行参数</span></a></h3><p>通过在命令行中输入以下命令，可查看全部执行参数</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="常用参数" tabindex="-1"><a class="header-anchor" href="#常用参数"><span>常用参数</span></a></h4><ul><li><code>-v</code>：详细测试输出信息</li><li><code>-s</code>：执行测试用例中的<code>print()</code>语句</li><li><code>-q</code>：简化测试输出信息</li><li><code>-m</code>：只执行指定标记的用例</li></ul>`,14),h=a(`<h4 id="用法示例" tabindex="-1"><a class="header-anchor" href="#用法示例"><span>用法示例</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-vs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;-vs&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再或者通过配置文件来做</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>在项目根目录下创建 <code>pytest.ini</code> 文件</p><p>在文件中写入以下内容</p><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">addopts</span> <span class="token punctuation">=</span> <span class="token value attr-value">-vs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在执行<code>pytest</code>命令时就不需要手动添加参数了</p><p>当使用插件的配置时，只需要在该行参数后面直接添加就可以，中间以空格分隔</p><h3 id="生成html报告文件" tabindex="-1"><a class="header-anchor" href="#生成html报告文件"><span>生成html报告文件</span></a></h3><p>修改配置文件为如下内容</p><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">addopts</span> <span class="token punctuation">=</span> <span class="token value attr-value">-vs --html=./report/report.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>pytest</code>命令后，在文件夹的根目录下就会生成一个<code>report</code>文件夹</p><p>在文件夹内，有一个<code>report.html</code>文件，该文件就是html报告文件</p><h3 id="重新执行失败用例" tabindex="-1"><a class="header-anchor" href="#重新执行失败用例"><span>重新执行失败用例</span></a></h3><p>修改配置文件为如下内容</p><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">addopts</span> <span class="token punctuation">=</span> <span class="token value attr-value">-vs --reruns 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置会让失败的用例重新执行2次</p><h3 id="需要执行的用例位置" tabindex="-1"><a class="header-anchor" href="#需要执行的用例位置"><span>需要执行的用例位置</span></a></h3><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token comment"># 执行该文件夹下的所有模块</span>
<span class="token key attr-name">testpaths</span> <span class="token punctuation">=</span> <span class="token value attr-value">./testcases</span>
<span class="token comment"># 执行指定模块</span>
<span class="token key attr-name">testpaths</span> <span class="token punctuation">=</span> <span class="token value attr-value">./testcases/test_api.py</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定执行testcases目录下的测试用例</p><h3 id="修改默认规则" tabindex="-1"><a class="header-anchor" href="#修改默认规则"><span>修改默认规则</span></a></h3><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">python_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">mahe_*.py</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认规则是：模块必须以 <code>test_</code> 开头 或 以 <code>_test</code> 结尾</p><p>在经过如上修改后，规则变为：必须以 <code>mahe_</code> 开头</p><p>同理，类和函数也可以修改</p><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">python_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">mahe_*.py</span>
<span class="token key attr-name">python_classes</span> <span class="token punctuation">=</span> <span class="token value attr-value">Mahe*</span>
<span class="token key attr-name">python_functions</span> <span class="token punctuation">=</span> <span class="token value attr-value">mahe_*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置基础路径" tabindex="-1"><a class="header-anchor" href="#配置基础路径"><span>配置基础路径</span></a></h3><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">base_url</span> <span class="token punctuation">=</span> <span class="token value attr-value">https://www.baidu.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用例标记" tabindex="-1"><a class="header-anchor" href="#用例标记"><span>用例标记</span></a></h3><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">markers</span> <span class="token punctuation">=</span>
    business: 业务测试
    smoke: 冒烟测试
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好标记后，需要在测试用例（函数）上面添加注解 <code>@pytest.mark.标记名</code></p><p>然后在执行时，需要指定标记执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 执行单个</span>
pytest <span class="token parameter variable">-m</span> 标记名
<span class="token comment"># 执行多个</span>
pytest <span class="token parameter variable">-m</span> <span class="token string">&quot;标记名1 or 标记名2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="前后置-固件-夹具" tabindex="-1"><a class="header-anchor" href="#前后置-固件-夹具"><span>前后置，固件，夹具</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 每个用例（函数）前后执行</span>
<span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;用例执行前&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">teardown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;用例执行后&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 每个类前后执行</span>
<span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;类执行前&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;类执行后&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这种方式在工作中并不常用，更多的是使用 <code>Fixture固件</code> 和 <code>conftext.py文件</code> 实现前后置</p><h2 id="fixture固件" tabindex="-1"><a class="header-anchor" href="#fixture固件"><span>Fixture固件</span></a></h2><p>使用方式是注解 <code>@pytest.fixture()</code></p><p>该注解需要写在一个独立的函数上（不在测试用例的类里）</p><p>对于前后置问题，具体实现是通过代码来实现的，如下</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：在一个文件中设置的Fixture固件只能在该文件内部使用。如果希望能全局访问，则需要结合 <code>conftext.py</code> 文件</p><p><strong>注意</strong>：所有fixture固件的参数都是关键字参数</p><p><strong>注意</strong>: fixture命名不要以test开头，要和测试用例区分开</p><h3 id="scope参数-作用域" tabindex="-1"><a class="header-anchor" href="#scope参数-作用域"><span>scope参数，作用域</span></a></h3><p>该参数作用是：让被该注解方法，在执行什么的时候进行前后置执行</p><p>固定的值有四个：</p><ul><li><code>function</code>: 方法</li><li><code>class</code>: 类</li><li><code>module</code>: 模块</li><li><code>session</code>: 会话</li></ul><h3 id="autouse参数-自动执行" tabindex="-1"><a class="header-anchor" href="#autouse参数-自动执行"><span>autouse参数，自动执行</span></a></h3><p>该参数是一个<code>bool</code>值：True为<code>自动执行</code>，False为<code>手动执行</code></p><p>自动执行的作用是：<code>scope</code>内所有测试用例全部执行</p><p>手动执行的作用是：只有在测试用例中手动执行该固件，才会执行</p><h4 id="第一种调用方式" tabindex="-1"><a class="header-anchor" href="#第一种调用方式"><span>第一种调用方式</span></a></h4><p>在测试用例的参数内添加需要执行的函数名</p><p>写法如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">surround_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> surround_func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试用例&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，只有 <code>scope=&quot;function&quot;</code> 时，才需要手动执行</p><p>fixture固件也有返回值，按照如上示例，想接收 <code>surround_func</code> 方法的返回值，只需要在 <code>test_func</code> 中操作fixture固件的同名参数即可</p><h4 id="第二种调用方式" tabindex="-1"><a class="header-anchor" href="#第二种调用方式"><span>第二种调用方式</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">surround_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">&quot;surround_func&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试用例&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想手动调用多个Fixture固件，只需要在注解里面添加即可，使用 <code>,</code> 分割</p><h3 id="params参数-参数化" tabindex="-1"><a class="header-anchor" href="#params参数-参数化"><span>params参数，参数化</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;mahe666&#39;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;mahe888&#39;</span><span class="token punctuation">,</span> <span class="token number">654321</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 参数名不可改变</span>
<span class="token keyword">def</span> <span class="token function">example_method</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 注意，这里的param单词是单数形式，不是复数形式</span>
    <span class="token keyword">yield</span> request<span class="token punctuation">.</span>param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token comment"># 这里只能通过这种方式，才能获取参数</span>
    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> example_method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>example_method<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试用例&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，由于fixture固件的参数有两个元素，所以，该方法调用了两次</p><h3 id="ids参数-参数别名" tabindex="-1"><a class="header-anchor" href="#ids参数-参数别名"><span>ids参数，参数别名</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;mahe666&#39;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;mahe888&#39;</span><span class="token punctuation">,</span> <span class="token number">654321</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ids<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;data1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_method</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> request<span class="token punctuation">.</span>param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> example_method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>example_method<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用来改变参数名称</p><p>没啥用，知道就行</p><h3 id="name参数-固件别名" tabindex="-1"><a class="header-anchor" href="#name参数-固件别名"><span>name参数，固件别名</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;common_method&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前置执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后置执行&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">&quot;common_method&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">test_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试用例&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用手动执行固件的时候，需要通过固件名称进行调用</p><p>但是通过name参数指定固件别名之后，再进行手动执行，就需要通过别名来访问了</p>`,76);function b(y,g){const e=i("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("官网："),n("a",r,[s("https://pytest.org/"),t(e)])]),k,n("p",null,[s("插件列表："),n("a",v,[s("https://docs.pytest.org/en/stable/reference/plugin_list.html"),t(e)])]),m,l("\n- \n- `-k`：\n- `-x`：\n"),h])}const x=p(d,[["render",b],["__file","pytest.html.vue"]]);export{x as default};
