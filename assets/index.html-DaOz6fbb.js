import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,o as a}from"./app-CJh1pssu.js";const p={};function l(n,e){return a(),s("div",null,e[0]||(e[0]=[t(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-data-types.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/cplusplus/cpp-data-types.html</a></p><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型"><span>变量类型</span></a></h2><p>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-variable-types.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/cplusplus/cpp-variable-types.html</a></p><h3 id="c-c-中局部-全局变量初始值或默认值问题" tabindex="-1"><a class="header-anchor" href="#c-c-中局部-全局变量初始值或默认值问题"><span>C/C++中局部/全局变量初始值或默认值问题</span></a></h3><p>相关博客：<a href="https://www.cnblogs.com/zhangzongjun/p/15520449.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhangzongjun/p/15520449.html</a></p><h3 id="extern-关键字" tabindex="-1"><a class="header-anchor" href="#extern-关键字"><span>extern 关键字</span></a></h3><p>假设我们有两个源文件 <code>file1.cpp</code> 和 <code>file2.cpp</code></p><p>在 <code>file1.cpp</code> 中定义了一个全局变量：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myGlobalVar </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 这里定义并初始化了全局变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果我们想在 <code>file2.cpp</code> 中使用这个全局变量，就需要使用 extern 进行声明：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myGlobalVar;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 告诉编译器这个变量在其他地方定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，在 <code>file2.cpp</code> 中就可以使用 myGlobalVar 这个变量了。</p><p>其次，对于函数而言，同样假设在 <code>func1.cpp</code> 中定义了一个函数：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 函数的具体实现</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>func2.cpp</code> 中如果要调用这个函数，就可以这样声明：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">extern</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 声明函数在其他地方定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后就可以在 <code>func2.cpp</code> 中调用 myFunction 函数了。</p><p>extern 的主要作用就是让编译器知道，被声明的变量或函数是在其他的源文件中定义的，从而能够在当前文件中正确地使用它们，实现了代码在多个文件之间的共享和复用。</p><h2 id="修饰符-和-类型限定符类型" tabindex="-1"><a class="header-anchor" href="#修饰符-和-类型限定符类型"><span>修饰符 和 类型限定符类型</span></a></h2><p>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-modifier-types.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/cplusplus/cpp-modifier-types.html</a></p><h2 id="存储类" tabindex="-1"><a class="header-anchor" href="#存储类"><span>存储类</span></a></h2><p>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-storage-classes.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/cplusplus/cpp-storage-classes.html</a></p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>菜鸟教程：<a href="https://www.runoob.com/cplusplus/cpp-operators.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/cplusplus/cpp-operators.html</a></p>`,25)]))}const c=i(p,[["render",l],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/C%E5%92%8CCpp/Cpp/C__%E5%9F%BA%E7%A1%80/","title":"C++基础","lang":"zh-CN","frontmatter":{"title":"C++基础","dir":{"link":true,"order":10,"text":"C++基础"},"description":"数据类型 菜鸟教程：https://www.runoob.com/cplusplus/cpp-data-types.html 变量类型 菜鸟教程：https://www.runoob.com/cplusplus/cpp-variable-types.html C/C++中局部/全局变量初始值或默认值问题 相关博客：https://www.cnblogs...","head":[["meta",{"property":"og:url","content":"https://mahe666.github.io/doc/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/C%E5%92%8CCpp/Cpp/C__%E5%9F%BA%E7%A1%80/"}],["meta",{"property":"og:site_name","content":"Mahe666"}],["meta",{"property":"og:title","content":"C++基础"}],["meta",{"property":"og:description","content":"数据类型 菜鸟教程：https://www.runoob.com/cplusplus/cpp-data-types.html 变量类型 菜鸟教程：https://www.runoob.com/cplusplus/cpp-variable-types.html C/C++中局部/全局变量初始值或默认值问题 相关博客：https://www.cnblogs..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T07:43:35.000Z"}],["meta",{"property":"article:author","content":"Mahe666"}],["meta",{"property":"article:modified_time","content":"2024-07-08T07:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-08T07:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mahe666\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"变量类型","slug":"变量类型","link":"#变量类型","children":[{"level":3,"title":"C/C++中局部/全局变量初始值或默认值问题","slug":"c-c-中局部-全局变量初始值或默认值问题","link":"#c-c-中局部-全局变量初始值或默认值问题","children":[]},{"level":3,"title":"extern 关键字","slug":"extern-关键字","link":"#extern-关键字","children":[]}]},{"level":2,"title":"修饰符 和 类型限定符类型","slug":"修饰符-和-类型限定符类型","link":"#修饰符-和-类型限定符类型","children":[]},{"level":2,"title":"存储类","slug":"存储类","link":"#存储类","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[]}],"git":{"createdTime":1719209369000,"updatedTime":1720424615000,"contributors":[{"name":"mahe666","email":"m13234666930@163.com","commits":1}]},"filePathRelative":"编程开发/后端/C和Cpp/Cpp/C++基础/README.md","localizedDate":"2024年6月24日","autoDesc":true}');export{c as comp,o as data};
