import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,d as n,e as a,a as e,f as t}from"./app-CCNhByHC.js";const i={},r=t('<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h2><h3 id="小数类型" tabindex="-1"><a class="header-anchor" href="#小数类型"><span>小数类型</span></a></h3><p>小数，使用number类型</p><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>insert</span></a></h3><p>相关博客：</p>',5),d={href:"https://blog.csdn.net/weixin_36204061/article/details/116325689",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"限制查询条数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#限制查询条数"},[n("span",null,"限制查询条数")])],-1),k=n("p",null,"相关博客：",-1),b={href:"https://wenku.baidu.com/view/1dc843b068ec0975f46527d3240c844769eaa0e1.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><strong>注意</strong>：这个用法在和order by排序搭配使用时需要留意是先排序还是先限制</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h2><h3 id="截取字符串" tabindex="-1"><a class="header-anchor" href="#截取字符串"><span>截取字符串</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>substr<span class="token punctuation">(</span>字段名<span class="token punctuation">,</span><span class="token keyword">start</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符起始从1开始；</p><p>闭区间，两边都包含，例如substr(字段名,1,4)，字符串长度就是4</p><h3 id="强制转换" tabindex="-1"><a class="header-anchor" href="#强制转换"><span>强制转换</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>cast<span class="token punctuation">(</span>字段名 <span class="token keyword">as</span> <span class="token keyword">integer</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上是将字段强制转换为integer类型</p><p>在处理流水号的时候可以将固定的字符前缀去掉后使用如上方式排序</p><h2 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程"><span>存储过程</span></a></h2><p>存储函数相当于自定义函数，例如 <code>count()</code></p><p>使用之前需要先执行存储函数，然后查看存储函数的状态（是否有错误）</p><p>没错误的话就可以使用了</p><h3 id="blob类型转base64格式clob类型" tabindex="-1"><a class="header-anchor" href="#blob类型转base64格式clob类型"><span>blob类型转base64格式clob类型</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> base64encode<span class="token punctuation">(</span>p_blob <span class="token operator">IN</span> <span class="token keyword">BLOB</span><span class="token punctuation">)</span>
   <span class="token keyword">RETURN</span>  CLOB
<span class="token operator">IS</span>
   l_clob CLOB<span class="token punctuation">;</span>
   l_step PLS_INTEGER :<span class="token operator">=</span> <span class="token number">12000</span><span class="token punctuation">;</span> 
<span class="token keyword">BEGIN</span>
   <span class="token keyword">FOR</span>  i  <span class="token operator">IN</span>  <span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> TRUNC<span class="token punctuation">(</span><span class="token punctuation">(</span>DBMS_LOB<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>p_blob<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">/</span>l_step<span class="token punctuation">)</span> <span class="token keyword">LOOP</span>
	   l_clob :<span class="token operator">=</span> l_clob <span class="token operator">||</span> UTL_RAW<span class="token punctuation">.</span>cast_to_varchar2<span class="token punctuation">(</span>UTL_ENCODE<span class="token punctuation">.</span>base64_encode<span class="token punctuation">(</span>DBMS_LOB<span class="token punctuation">.</span>substr<span class="token punctuation">(</span>p_blob<span class="token punctuation">,</span> l_step<span class="token punctuation">,</span> i <span class="token operator">*</span> l_step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">END</span>  <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
   <span class="token keyword">RETURN</span>  l_clob<span class="token punctuation">;</span>
<span class="token keyword">END</span> base64encode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个存储函数返回的就是base64格式的clob类型</p><p>使用的时候不要忘记判断一下blob是否为空</p>`,18);function _(v,m){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[a("https://blog.csdn.net/weixin_36204061/article/details/116325689"),e(s)])])]),u,k,n("ul",null,[n("li",null,[n("a",b,[a("https://wenku.baidu.com/view/1dc843b068ec0975f46527d3240c844769eaa0e1.html"),e(s)])])]),h])}const w=p(i,[["render",_],["__file","index.html.vue"]]);export{w as default};
